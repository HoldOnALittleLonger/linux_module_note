Linux Kernel Module Programming Guide

Chapter 1 : Hello,world
  a kernel module at least has two function :
    init_module
    cleanup_module

    init_module will be registered into kernel,
    cleanup_module will be called when module exit,and clean up(undo) all things what init_module did.

  hello world :
    #include<linux/kernel.h>
    #include<linux/module.h>
    #include<linux/init.h>
    
    MODULE_LICENSE("GPL");
    MODULE_VERSION("v0.1");
    MODULE_AUTHOR("who");
    MODULE_DESCRIPTION("description");

    int __init init_module(void)
    {
            printk(KERN_INFO "hello world!");
	    return 0;
    }

    void __exit cleanup_module(void) {}

    module_init(init_module);
    module_exit(cleanup_module);

  /*  in the older kernel version,init_module() and cleanup_module() will as the entrance and the
   *  exit of module.
   *  now,use kernel function module_init() to register an init function of module,
   *  use kernel function module_exit() to register an exit function of module.
   */

  Makefile for kernel module :
    because kernel module is  not an independent executable,but an object file which will be linked into the
    kernel in runtime.
    so the gcc option "-c" is necessary.

    MODCFLAGS :
      __KERNEL__
        tell the header files that this code will be run in kernel mode,not as part of a user process.
      MODULE
        thell the header files to give the appropriate definitions for a kernel module.
      LINUX
        conditional compilation on the parts which are OS dependent.

    the certain flags in header config.h,kernel was compiled with these flags.

  Multiple file kernel modules :
    1>  in all the source files but one,add the macro definition "#define __NO_VERSION__"
    	normally,"module.h" use global variable "kernel_version" to record what is the kerne version this
	module compiled for.
	in the case of __NO_VERSION__ was defined,"module.h" wont include the header <version.h>.

    2>  compile all the source files as usual.

    3>  combine all object files into a single one.
    	execute linker with the command
	"ld -m elf_i386 -r -o <name of module>.o <1st source file>.o <2nd source file>.o ..."

  /*  this is the old way to compile kernel module.currently,for compile kernel module,should use the
   *  kernel Makefile which is in the path /lib/modules/`uname -r`/build .
   */

  the example of Makefile for a kernel module :
    context :
      
      obj-m += <kernel module name>.o
      <kernal module name>-objs += <1st dependence>.o ...
      <kernal module name>-objs += <Xth dependence>.o ...
      KBUILD_CFLAGS += <flags>
      ...

      all:
          make -C /lib/modules/`uname -r`/build M=$(PWD) module
      
      clean:
          make -C /lib/modules/`uname -r`/build M=$(PWD) clean


Chapter 2 : Character Device Files
  kernel module has two major ways to talk with processes.
  one :
    through device files(/dev).
  two :
    through proc file system.

  device file is generated for processes let they are able to communicate with device drivers in the kernel,
  through driver to communicate with physical devices.
  each device driver which is responsible for some type of hardware,and assigned its own major number.

  the file /proc/devices listed drivers and their major numbers,each physical device managed by a device driver
  is assigned a minor number.

  major number : type of hardware.
  minor number : physical device is managed by the device driver.
  

  mknod :
    create a device node.
  
  block devices have a buffer for requests,they can choose which order to respond.
  block devices can only accept input and return output in blocks.

  character devices and byte stream is alike,they can read any size of bytes and output as same.

  what action to taken when a file is opened and requsted to do something have to through file_operation struct.
  device file as same as use the file_operation struct to manipulate it.
  if the device file is opened by some processes,have to prevent remove the module from kernel,because if ejected
  it,but process calls the code in the old address registered by the kernel module,and it had been ejected,another
  module code is installed into that address,then wrong is ocurred.

  if the kernel module's reference count is not zero,then can not remove it from kernel.
  the variable mod_use_count_ is used to record how many objects is using this module.
  macro : MOD_INC_USE_COUNT , MOD_DEC_USE_COUNT can access that variable.
  
  in 2.6 kernel,module dont have to manage reference count by itself,new interfaces had been added.
  <linux/module.h>
    int try_module_get(struct module *);       //  inc module reference count
    void module_put(struct module *module);    //  dec module reference count

    struct module *find_module(const char *name);
    unsigned int module_refcount(struct module *mod);

      find a module via module @name.
      retrive module reference count via module pointer.

    struct module;
      this struct represent the module in kernel.


  LINUX_VERSION_NUMBER  -  current kernel version value.
  KERNEL_VERSION()      -  macro function to compute the kernel version value.
  			   for the special kernel version a.b.c
			   this function returns (2^16) * a + (2^8) * b + c

  <linux/fs.h>
    int __register_chrdev(unsigned int major, unsigned int baseminor, unsigned int count,
    			  const char *name, const struct file_operations *fops);
    void __unregister_chrdev(unsigned int major, unsigned int baseminor, unsigned int cout,
    	 	             const char *name);

      __register_chrdev is used to register a character device,__unregister_chrdev is used to unregister device.
      @major is major number
      @baseminor is the first of the range of minor numbers
      @count is the number of minor numbers required or the minor number the device is occupying
      @name is the name in /dev
      @fops is the associated file operations.

    /*  object-oriented file operations  */
    struct file_operations {
    	   ...
      	   ssize_t (*read) (struct file*, char __user *, size_t, loff_t *);
      	   ssize_t (*write) (struct file*, const char __user *, size_t, loff_t *);
      	   int (*open) (struct inode *, struct file *);
      	   int (*release) (struct inode *, struct file *);
	   ...
    };

  the method to get device's minor number in the case several physical device using the driver :
    inode.i_rdev & 0xFF

  !  must use preprocessing macro to compate older kernel


Chapter 3 : The /proc File System
  the another kernel modules to send information to processes is the /proc file system.
  proc register dynamic is allow kernel to determine what inode the file to use.
  for create a file in /proc,have to define a structure which contains all informations 
  needed by /proc file system.

  the structure saved informations needed by /proc is defined in header <linux/proc_fs.h>.

  typedef int (read_proc_t)(char *page, char **start, off_t off, int count, int *eof,
  	      		    void *data);
  typedef int (write_proc_t)(struct file *file, const char __user *buffer, unsigned long count,
  	      		     void *data);
  struct proc_dir_entry {
  	 unsigned int low_ino;  /*  lower inode number,0 means dynamic  */
  	 ...
	 uid_t uid;
	 gid_t gid;
	 loff_t size;
	 const struct inode_operations *proc_iops;
	 const struct file_operations *proc_fops;
	 ...
	 read_proc_t *read_proc;
	 write_proc_t *write_proc;
	 atomic_t count;
	 ....
  };
  /*  read_proc will be called by __proc_file_read(),this function is called by proc_file_read().
   *  and function proc_file_read() is the default method in proc_fops for reading.
   *  write_proc will be called by proc_file_write(),this function is the default method in proc_fops for
   *  writing.
   *  function create_proc_read_entry() receives a read_proc object,and sets it to proc_dir_entry.read_proc.
   *  read_proc and write_proc are the user-defined routines for read or write proc file,but of course,
   *  client have not to use the default functions to read or write proc files.
   */

  as usually,the global variable proc_root is the root dentry /proc .
  in the kernel 2.6.34, proc_regiser and proc_unregister primitives becomes static function in
  fs/proc/generic.c ,for register proc entry,have to use these functions :

    struct proc_dir_entry *create_proc_entry(const char *name, mode_t mode, struct proc_dir_entry *parent);
    void remove_proc_entry(const char *name, struct proc_dir_entry *parent);
    struct proc_dir_entry *proc_create_data(const char *name, mode_t mode, struct proc_dir_entry *parent,
    	   		  		    const struct file_operations *proc_fops, void *data);

    /*  proc_create_data() will sets proc_dir_entry.data = data, proc_dir_entry.proc_fops = proc_fops  */
  
  create proc_dir_entry object when module is initializing,and remove the proc_dir_entry object when module
  is exiting.


Chapter 4 : Using /proc For Input
  for create a proc directory entry,have to use struct proc_dir_entry to represent the object.
  but it do not contain write function,because /proc is used to report kernel situation to processes.
  there is a way to allow write /proc file entry that is use filesystem mechanism.

  <linux/fs.h>
  struct inode_operations;
  struct file_operations;

    inode_operations contains all the functions kernel vfs aksed the filesystem have to implements.
    these operations is used to manipulate inode object.
    file_operations is same as inode_operations,but these operations is used to manipulate file object.
      (the different between the two is that file operations deal with the file itself,and inode operations
       deal with ways of referencing the file,such as creating links to it.)

  so the special proc_iops and proc_fops members allow to write /proc/entry.

  but have to notice read functions are used for output,write functions are used for input,the reason is
  that read and write refer to the user's point of view - if a process reads something from the kernel,
  then kernel needs to output it,and if a process writes something to the kernel,then kernel receives
  it as input.

  another point have to notice,that is,kernel land and user land has different memory area.
  a lot of kernel function just manipulate kernel memory not userland memory.
  for example :
    vfs_read() function will checks where the @buffer from.
    __user compiler attribute required the memory this pointer points to should be a userland memory,
    vfs_read() will checks if that true.

    function set_fs() and get_fs() are used to change memory segment checking behavior.
    there has two possible value :
      KERNEL_DS
      USER_DS

      KERNEL_DS disable userland memory segment checking in kernel land.
      USER_DS enable userland memory segment checking in kernel land.

      /*  these function is declared in <asm/uaccess.h>  */

  function copy_to_user() is used to output something to userland,@buffer have to be a pointer points to
  userland memory segment.
  function copy_from_user() is used to input something from userland,@buffer have to be a pointer points to
  userland memory segment.


Chapter 5 : Talking to Device Files (writes and IOCTLs)
  almost device drivers has been implemented ioctl function,client can use ioctl function to make 
  communication with devices.
  the entry under /dev is known as device file,and it is supposed to represent physical device.
  open a device file and read from it is input,
  open a device file and write to it is output.
  but more useful method is use ioctl function.

  generally,ioctl() is called with three parameters :
    1>  the file descriptor of the appropriate device file
    2>  the ioctl number
    3>  a parameter which is of type long

    @ioctl_number encodes the major device number,the type of the ioctl,the command,and the type of the @parameter.
    when add a new ioctl into kernel,have to use the macros defined in <linux/ioctl.h> :
      _IO     an ioctl with no parameters
      _IOW    an ioctl with write parameters  (copy_from_user)
      _IOR    an ioctl with read parameters   (copy_to_user)
      _IOWR   an ioctl with both write and read parameters 

      @first_arg for these macros is an identify letter or number from the table(defined in Documentation/ioctl/ioctl-number.txt)
      @second_arg for these macros is a sequence number
      @third_arg for these macros is the type of the data going into the kernel or coming out the kernel

  usage description :
    device file also has a file_operations structure is associated with it.
    file_operations.read represent the function used to read file
    file_operations.write represent the function used to write file
    file_operations.ioctl represent the function used to be called when process calls ioctl on it
    file_operations.open represent the function used to open file
    file_operations.close represent the function used to close file
    create a file_operations object,and associated it with a device file via __register_chardev(),
    now process under userland could calls ioctl() to communicate with the module(the device file).

    Steps :
      1>  define device_read()
      	    it is alike at generic file read function.
      2>  define device_write()
      	    it is alike at generic file write function.

      /*  have to notice that the @buffer is userland memory segment  */

      3>  define device_ioctl()
      	    if it supports several command(ioctl_number),then have to deal with all situation via
	    if expression or switch expression.
	    command matching have to use this form  _IO<What>(MAJOR_NUMBER, SEQUENCE_NUMBER, TYPE),
	    command macro is defined by _IO macros via different SEQUENCE_NUMBER and TYPE.

      /*  attention,the role for read is get something from outside(maybe just kernel land) and
       *  return to user process,
       *  the role for write is get something from user process and output.
       */

      4>  define device_open()
      	    similar to generic open.
      5>  define device_release()
      	    similar to generic close.

  /*  ioctl mechanism is too older,and too complicate for user process,so not recommend use it  */


Chapter 6 : Startup Parameters
  define global variables in the kernel module and insmod will fill them.
  kernel version 2.0 does not check variable type,generally use string pointer points to the 
  module parameter.
  kernel version 2.2 use macro MACRO_PARM to tell insmod that expect a parameters,its name and its type.

  e.g.
    char *str1, *str2;
    MODULE_PARM(str1, "s");
    MODULE_PARM(str2, "s');

  in newer version(since 2.6),macro_parm is MACRO_PARM.and has new proto.
    <linux/moduleparam.h>
    #define macro_parm(name, type, permission)

    @name is the name of the variable
    @type is the type of the variable
    @permission is the R | W permissions of variable

  for pass arguments to kernel module have to use this form of insmod or modprobe :
    insmod <module> <variable_name>=<variable_argument> ...
    modprobe <module> <variable_name>=<variable_argument> ...

  if no arguments were past,then kernel use the default value for the variables.
  use bootargs to set module argument at the situation that module is inside kernel
  and U-boot boot the kernel.

  /*  under C the object file only has the location of global variables,not their type,
      that is why header files are necessary.  */


Chapter 7 : System Calls
  in linux or unix,the only one way to legally fall into kernel from userland that is SystemCall.
  if system is running under protect mode,then user process is not allowed to access kernel memory,
  so they can not calls kernel functions.kernel use CPU flag registers to implement this.
  but there is an exception that is SystemCall,if userland process wants kernel to provide some 
  services,it have to use SystemCall.

  Intel x86 CPU,soft interrupt will triggers SystemCall,interrupt number is 0x80.
  and EAX saves the SystemCall number,
  @p1 in EBX
  @p2 in ECX
  @p3 in EDX
  @p4 in ESI
  @p5 in EBP
  @return in EAX

  /*  if there is more than five arguments were existed,have to save them in continuous units,and
   *  save the header pointer in EBX.
   */

  (Intel x86 does not use stack to passing arguments)
  but kernel SystemCall often added asmlinkage flag,that means all parameter gets from stack,
  so use push instruction to push argument into stack,order is from right to left.

  (Intel x86_64 does not use stack,too)
  RAX RDI RSI RDX RCX R8 R9
  @n  @1  @2  @3  @4  @5 @6
  @ret

  if developer wants to change the behavior of system,syscall is the suit place to set some traps.
  linux syscall will check sys_call_table to get SystemCall function's address.
  for change the behavior of a syscall,should let the unit in sys_call_table which contains the custom code
  instead of original syscall function.(it is known as syscall hook,there are another ways to implement that)
  	     	      	      	       (i.e. VFS hook)

  use kernel module to implement it,when module is insert,the syscall would be changed,and when the kernel module
  is exit,it must to restore the original syscall,otherwise,that will leave system in an unstable state.
  how to gets the address of sys_call_table in kernel has several methods,i.e. kallsyms_lookup_name(@name)

  this approach is dangerous,because of the possibility of two kernel modules changing the same system call.
  (change behavior of syscall is still dangerous)
    module A and module B
    A hook syscall sys_open to custom code,after it is finished,calls the original syscall
    B hook syscall sys_open to custom code,after it is finished,calls the original syscall

    A insert
    sys_open -> A_open
    B insert
    sys_open(A_open) -> B_open

    B remove first
    sys_open(A_open) -> B_open -> sys_open(A_open)
    A remove
    sys_open(A_open) -> original_sys_open

    A remove first
    sys_open(A_open) -> original_sys_open
    B remove
    sys_open(B_open) -> sys_open(A_open)  /*  but A_open is no longer existed,system crash  */

    sovle :
      A and B checks if sys_call_table[_NR_open] == Custom_open,do nothing in false,restore in true.

      but this cause even worse problem :
        when A is removed,it sees that the system call was changed to B open so that it is no longer pointing
	to A open,so it(A) won't restore it to sys_open before it is removed from memory,but B_open will still
	try to call A open which is no longer there,so that even without removing B the system would crash.

      prevent this :
        1>  restore the call to the original value sys_open,but this request address of sys_open is have been known
	2>  use the reference count to prevent root from rmmod the module once it is loaded
	    (A is referred by B,so reference count is not equal to zero)
	    (  A ->  B  )


Chapter 8 : Blocking Processes
  the generally way to let user process going to sleep that is change process state to TASK_INTERRUPTIBLE and then 
  give up CPU time,do this via calls schedule().
  but the process have to be waken up when the expected event is came in,so must put the process into a wait queue.
  the wait queue will be checked at next scheduling,if the expected event is satisfied,then scheduler will wake up
  all processes in this wait queue.(there is no way to wake up the special one of these processes)

  in version 2.6,the old interfaces interruptible_sleep_on() etc,should not be used at current version.
  new interfaces wait_event() have been instead them.
  <linux/wait.h>
    /*  wait_event - sleep until a condition gets true  
     *               this interface will leaves process state in TASK_UNINTERRUPTIBLE
     *  @wq : the wait queue,it is an object of type struct wait_queue_t.
     *  @condition : the expected event.
     *  retunr - no return value.
     */
    #define wait_event(wq, condition)

    /*  wait_event_interruptible - sleep until a condition gets true
     *                             this interface is same as wait_event,but it is interruptible,
     *                             that is leave process state in TASK_INTERRUPTIBLE.
     *  @wq : wait queue
     *  @condition : the expected condition
     *  return - a int value
     */
    #define wait_event_interruptible(wq, condition)

  wait queue structure is defined in <wait.h>,in version 2.6,it is defined with this structure :
  <linux/wait.h>
    typedef struct __wait_queue wait_queue_t;
    typedef int (*wait_queue_func_t)(wait_queue_t *wait, unsigned mode, int flags, void *key)
    struct __wait_queue {
            unsigned int flags;
    #define WQ_FLAG_EXCLUSIVE   0x01
  	    void *private;
	    wait_queue_func_t func;
	    struct list_head task_list;	    
    }

    #define wake_up(x)  __wake_up(x, TASK_NORMAL, 1, NULL);
    ...

    /*  wait_queue_func_t object will be called at the time wake_up() is called on the wait queue @x,
     *  @key will be passed by __wake_up().
     *  if the condition for the wait_queue_t @x is satisfy,then producer have to calls wake_up(@x)
     *  to wake up processes waiting to this condition.
     *  __wake_up() is defined in <kernel/sched.c>
     */

  signal is also wakes up process,so that,if signal_pending(current) is true,then wait_event_interruptible()
  would be fault,and returns -ERESTARTSYS.

  this chapter created a proc entry named sleep,and use a global variable to records if the file is opened by
  a process,if it is,then all processes try to open file will be block(via module_interruptible_sleep_on()) until
  open counter becomes zero.


Chapter 9 : Replacing printk's
  generally,linux kernel code output messages through printk() function,but sometimes,maybe need to send messages to
  the tty associated with current process.it is a useful way to debug of send some informations to user.(kernel does not
  suggest read or write a file in kernel space)
  but tty has too many types be there,and should not mix X and kernel module programming,this is an important point have
  to pay attention.

  the way to operates a tty object is the structure tty_operations.
  <linux/tty.h>
    struct tty_struct {
            int magic;
	    struct kref kref;
	    struct tty_driver *driver;
	    const struct tty_operations *ops;
	    int index;
	    ...
    };
    /*  linux use this struct to represents a tty object  */

  <linux/tty_driver.h>
    struct tty_operations {
            struct tty_struct *(*lookup)(struct tty_driver *driver, struct inode *inode, int idx);
	    ...
	    int (*write)(struct tty_struct *tty, const unsigned char *buf, int count);
	    ...
    };
    /*  this structure does not contains reading function,that is tty is used to output,not a input device  */

  xterm is the tty of X system,it also use these structure to be represented.
  for get the tty is associated with current process,have to use macro "current" to get task_struct of this process,
  the member tty is a pointer points to current tty.

  e.g.
    struct tty_struct *ts = NULL;
    ts = current->tty;
    ts->ops->write(ts, buffer, length);

  /*  kref is the generic reference counter in kernel  */


Chapter 10 : Scheduling Tasks
  for scheduling a task in kernel,there has two possibility ways.
    1>  use crontab daemon.  /*  crond  */
    	  a process start kernel module via a special way at the certain time.
    2>  use workqueue.  /*  such interfaces in the version older than 2.6 is tq_struct  */
          do not need any another process to start task,just put task in a workqueue.
	  this can not request system executes the work at the certain time,because workqueue
	  is the mechanism used by interrupting behalf part.
	  but workqueue allows sleeping and running in process context.(tasklet is different)

  <linux/workqueue.h>
    struct work_struct;
    typedef void (*work_func_t)(struct work_struct *work);

    struct work_struct {
            atomic_long_t data;
    #define WORK_STRUCT_PENDING 0
    #define WORK_STRUCT_STATIC 1
    #define WORK_STRUCT_FLAG_MASK (3UL)
    #define WORK_STRUCT_WQ_DATA_MASK (~WORK_STRUCT_FLAG_MASK)
            struct list_head entry;
	    work_func_t func;
    #ifdef CONFIG_LOCKDEP
    	    struct lockdep_map lockdep_map;
    #endif	    
    };

    /*  every work_struct object represents a unqueue work  */
    /*  @func would be executed when the work is scheduled  */

  <kernel/workqueue.c>
    struct cpu_workqueue_struct {
            spinlock_t lock;
	    struct list_head worklist;
	    wait_queue_head_t more_work;      /*  condition if there has more work is inserted  */
	    struct work_struct *current_work; /*  current work is ready to running or is running  */
	    struct workqueue_struct *wq;      /*  associated workqueue  */
	    struct task_struct *thread;	      /*  the worker thread for executes work  */
    } ____cacheling_aligned;

    struct workqueue_struct {
            struct cpu_workqueue_struct *cpu_wq;  /*  associated cwq  */
	    struct list_head list;
	    const char *name;  /*  workqueue name  */
	    int singlethread;  /*  is the cpu single thread  */
	    int freezeable;
	    int rt;
    #ifdef CONFIG_LOCKDEP
            struct lockdep_map lockdep_map;
    #endif	    
    };

    /*  queue_work - queue a work to workqueue
     *  @wq : the workqueue object pointer.
     *  @work : the work.
     *  return - 0 if @work is already on a queue,non-zero otherwiser.
     */
    int queue_work(struct workqueue_struct *wq, struct work_struct *work);

      procedure >
        queue_work ->
          queue_work_on ->
	    __queue_work ->
	      insert_work ->
	        list_add_tail AND wake_up(&cwq->more_work)

    /*  __create_workqueue_key - create a workqueue with key
     *  @name : workqueue name.
     *  @singlethread : singlethread field.
     *  @freezeable : freezeable field.
     *  @rt : rt field.
     *  @key : key argument for lockdep_init_map.
     *  @lock_name : name argument for lockdep_init_map,lockdep_map field will be
     *               initialized by lockdep_init_map().
     *  return - reutrn a workqueue_struct pointer if succeed,return NULL otherwise.
     */
    struct workqueue_struct *__create_workqueue_key(const char *name, int singlethread, int freezeable, int rt,
    	   		    			    struct lock_class_key *key, const char *lock_name);

      procedure >
        alloc structure memory -> alloc percpu data ->
	init lockdep_map -> set field values ->
	init_cpu_workqueue -> create_workqueue_thread ->
	start_workqueue_thread

	init_cpu_workqueue() will init cpu_workqueue_struct.
	create_workqueue_thread() will create a kernel thread with the function worker_thread defined in
	<kernel/workqueue.c>,and set cpu_workqueue_struct.thread points to it.
	start_workqueue_thread() has these codes :
	  if (p->thread) {
	          if (cpu >= 0)
		          kthread_bind(p, cpu);
	          wake_up_process(p);		  
	  }

    worker_thread() is a function which process a endless loop(if kthread should not be stop or no schedule() is called),
    and calls run_workqueue().
    run_workqueue() extract work from cpu_workqueue_struct,and calls list_del_init(head.next) to delete current work from
    cpu_workqueue,then calls f(work) to executes real work.

  /*  destroy a workqueue via destroy_workqueue()  */
  /*  cancel a pending work via cancel_delayed_work()  */

  because linux splited interrupting to two parts,so if want work is executed at every timer interrupt,have to register timer irq
  and put really work in workqueue mechanism.(another has soft irq and tasklet)


    	   		    				


  

